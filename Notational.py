import sublime, sublime_plugin, os, re, subprocess

settings = sublime.load_settings('Notational.sublime-settings')

class FollowNoteLinkCommand(sublime_plugin.TextCommand):
    def run(self, edit):
        directory = settings.get('notational_directory')
        directory = os.path.expanduser(directory)
        extension = settings.get('notational_extension')
        window = self.view.window()
        location = self.view.sel()[0]
        selected_text = self.view.substr(location)
        the_file = directory+selected_text+extension

        if os.path.exists(the_file):
            #open the already-created page.
            new_view = window.open_file(the_file)

        else:
            #create the file then open it.
            file(the_file, "w")
            new_view = window.open_file(the_file)

class InsertNoteLinkCommand(sublime_plugin.TextCommand):
    def run(self, edit):
        directory = settings.get('notational_directory')
        directory = os.path.expanduser(directory)
        extension = settings.get('notational_extension')
        self.files = os.listdir(directory)
        self.modified_files = [item.replace(extension,"") for item in self.files]
        self.view.window().show_quick_panel(self.modified_files, self.on_selection)

    def on_selection(self, selection):
        if selection == -1:
            return
        edit = self.view.begin_edit()
        startloc = self.view.sel()[-1].end()
        link = self.modified_files[selection]
        link = "[["+link+"]]"
        self.view.insert(edit, startloc, link)
        self.view.end_edit(edit)


class BestNoteUpCommand(sublime_plugin.TextCommand):
    def run(self, edit):
        directory = settings.get('notational_directory')
        directory = os.path.expanduser(directory)
        extension = settings.get('notational_extension')
        window = self.view.window()
        search_view = window.views_in_group(0)[0]
        found_regions = search_view.get_regions("best_note")
        new_best_note_point = found_regions[0].begin()-1
        if new_best_note_point < 0:
            new_best_note_point = 0

        new_best_note_line = search_view.line(new_best_note_point)
        search_view.add_regions("best_note", [new_best_note_line], "search.vi", sublime.DRAW_OUTLINED)
        note_title = search_view.substr(new_best_note_line)
        the_file = directory+note_title+extension
        window.focus_group(1)
        window.open_file(the_file, sublime.TRANSIENT)

class BestNoteDownCommand(sublime_plugin.TextCommand):
    def run(self, edit):
        directory = settings.get('notational_directory')
        directory = os.path.expanduser(directory)
        extension = settings.get('notational_extension')
        window = self.view.window()
        search_view = window.views_in_group(0)[0]
        found_regions = search_view.get_regions("best_note")
        new_best_note = found_regions[0].end()+1
        new_best_note_line = search_view.line(new_best_note)
        search_view.add_regions("best_note", [new_best_note_line], "search.vi", sublime.DRAW_OUTLINED)
        note_title = search_view.substr(new_best_note_line)
        the_file = directory+note_title+extension
        window.focus_group(1)
        window.open_file(the_file, sublime.TRANSIENT)

class OpenBestNoteCommand(sublime_plugin.TextCommand):
    def run(self, edit):
        directory = settings.get('notational_directory')
        directory = os.path.expanduser(directory)
        extension = settings.get('notational_extension')
        found_regions = self.view.get_regions("best_note")
        note_title = self.view.substr(found_regions[0])
        the_file = directory+note_title+extension
        window = self.view.window()
        window.focus_group(1)
        window.open_file(the_file)

class NoteSearchCommand(sublime_plugin.TextCommand):
    def on_change(self, search_term):

        if self.autogenerated == False and search_term != self.user_text:
            # Only run auto complete if we didn't run it last time.
            # The added text will itself trigger the on_change method.
            # Also test if the user just cleared the highlight by deleting it.

            self.autogenerated = True
            self.user_text = search_term


            # Figure out what the auto-complete text should be
            found_region = self.search_view.find("^"+self.user_text, 0, sublime.IGNORECASE)
            if found_region:
                line_of_found = self.search_view.line(found_region)
                remainder_region = sublime.Region(found_region.end(), line_of_found.end())
                remainder_text = self.search_view.substr(remainder_region)

                search_edit = self.input_panel.begin_edit()
                whole_line = self.input_panel.line(0)
                sel = self.input_panel.sel()

                self.input_panel.insert(search_edit, whole_line.end(), remainder_text)
                new_whole_line = self.input_panel.line(0)

                selected_region = sublime.Region(whole_line.end(),new_whole_line.end())
                sel.clear()
                sel.add(selected_region)

                self.input_panel.end_edit(search_edit)
        else:
            self.autogenerated = False

        # Erase everything in the search_view
        self.search_view.run_command("select_all")
        everything = self.search_view.sel()[0]
        erase_edit = self.search_view.begin_edit()
        self.search_view.erase(erase_edit, everything)
        self.search_view.end_edit(erase_edit)

        # Add line by line the results of a spotlight search
        self.search_results = ""
        if self.user_text != "":         
            p = subprocess.Popen(["mdfind","-onlyin",self.directory,self.user_text],stdout = subprocess.PIPE).stdout
            self.search_results = p.read()
            self.search_results = re.sub(r''+self.directory+'([^.]*)'+self.extension, r'\1', self.search_results)


        search_results_edit = self.search_view.begin_edit()
        self.search_view.insert(search_results_edit,0,self.search_results)
        self.search_view.end_edit(search_results_edit)


        found_region = self.search_view.find("^"+self.user_text, 0, sublime.IGNORECASE)
        if found_region:
            found_line = self.search_view.line(found_region)
            self.search_view.add_regions("best_note", [found_line], "search.vi", sublime.DRAW_OUTLINED)
            note_title = self.search_view.substr(found_line)
            the_file = self.directory+note_title+self.extension
            self.window.focus_group(1)
            self.window.open_file(the_file, sublime.TRANSIENT)
            self.window.focus_view(self.input_panel)
        else:
            self.window.focus_view(self.starting_view)
            self.window.focus_view(self.input_panel)

    def on_done(self, search_term):

        if search_term != "":
            the_file = self.directory+search_term+self.extension
            #Create a new note with the typed text
            if os.path.exists(the_file):
                #open the already-created page. (fail safe)
                opened_view = self.search_view.window().open_file(the_file)
            else:
                #create the file then open it.
                file(the_file, "w")
                opened_view = self.search_view.window().open_file(the_file)


        self.window.focus_view(self.search_view)
        self.window.run_command("close_file")

        self.window.set_layout({
            "cols": [0.0, 1.0],
            "rows": [0.0, 1.0],
            "cells": [[0, 0, 1, 1]]
            })

    def on_cancel(self):
        self.window.focus_view(self.search_view)
        self.window.run_command("close_file")

        self.window.set_layout({
            "cols": [0.0, 1.0],
            "rows": [0.0, 1.0],
            "cells": [[0, 0, 1, 1]]
            })

        self.window.focus_view(self.starting_view)

    def run(self, edit):
        self.directory = settings.get('notational_directory')
        self.directory = os.path.expanduser(self.directory)
        self.extension = settings.get('notational_extension')  
        self.window = self.view.window()
        self.starting_view = self.view

        self.window.set_layout({
            "cols": [0.0, 0.25, 1.0],
            "rows": [0.0, 1.0],
            "cells": [[0, 0, 1, 1], [1, 0, 2, 1]]
            })

        main_views = self.window.views()
        for current_view in main_views:
            self.window.focus_view(current_view)
            self.window.run_command("move_to_group", {"group": 1})

        self.window.focus_view(self.starting_view)


        self.window.focus_group(0)
        self.search_view = self.window.new_file()
        self.search_view.set_scratch(True)
        self.search_view.set_name("%s" % "Search Results")
        self.search_view.set_syntax_file('Packages/Notational/Notational Search Results.tmLanguage')

        self.autogenerated = False
        self.user_text = ""

        self.input_panel = self.window.show_input_panel("Notes:", "", self.on_done, self.on_change, self.on_cancel)








